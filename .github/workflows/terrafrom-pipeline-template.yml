name: terraform-pipeline-template
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      runner:
        required: true
        type: string
      tf_version:
        required: true
        type: string
      tf_init:
        required: true
        default: true
        type: boolean
      tf_plan:
        required: true
        default: false
        type: boolean
      tf_apply:
        default: false
        type: boolean
      tf_varsfile:
        required: true
        type: string
      backend_config:
        required: true
        type: string
      Org: 
        required: true
        type: string
      repo: 
        required: true
        type: string
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      MODULE_TOKEN:
        required: true
      DEPLOY_TOKEN:
        required: true

jobs:
  terraform: 
    name: ${{ inputs.environment }}-deployment
    runs-on: ${{ inputs.runner }}
    permissions:
      contents: read
      id-token: write
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - name: checkout-module-repo
        uses: actions/checkout@v4
        with: 
          repository: ab-all-hub/terraform-modules
          token: ${{ secrets.MODULE_TOKEN }}
          path: templates

      - name: checkout-deploy-repo
        uses: actions/checkout@v4
        with: 
          repository: ${{ inputs.org }}/${{ inputs.repo }}
          token: ${{ secrets.DEPLOY_TOKEN }}
          path: deploy

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Initialize Terraform
        if: ${{ inputs.tf_init == true }}
        working-directory: templates/azure/terraform
        run: |
          terraform init -backend-config=deploy/${{ inputs.environment }}/${{ inputs.backend_config }}
          
      - name: Validate Terraform
        if: ${{ inputs.tf_init == true }}
        working-directory: templates/azure/terraform
        run: |
          terraform validate
        
      - name: Plan Terraform
        if: ${{ inputs.tf_plan == true }}
        working-directory: templates/azure/terraform
        run: |
          terraform plan -out=tfplan --var-file=deploy/${{ inputs.environment }}/${{ inputs.tf_varsfile }}
        
      - name: Apply Terraform
        if: ${{ inputs.tf_apply == true }}
        working-directory: templates/azure/terraform
        run: |
          terraform apply -auto-approve tfplan