name: terraform-pipeline-template

on:
  workflow_call:
    inputs:
      terraform_directory:
        required: true
        type: string
      environment:
        required: true
        type: string
      tf_version:
        required: true
        type: string
      tf_init:
        required: true
        default: true
        type: boolean
      tf_plan:
        required: true
        default: false
        type: boolean
      tf_apply:
        default: false
        type: boolean
      tf_varsfile:
        required: true
        type: string
      backend_config:
        required: true
        type: string
      Org: 
        required: true
        type: string
      repo: 
        required: true
        type: string

    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      TOKEN:
        required: true

jobs:
  precheck:
    name: precheck-(${{ inputs.environment }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          repository: ${{ inputs.org }}/${{ inputs.repo }}
          token: ${{ secrets.TOKEN }}
          persist-credentials: false

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
          enable-AzPSSession: true

      - name: Validate stroage account
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          inlineScript: |
            Write-Host "Validate: Get Storage account details"
            $bkp_config   = Get-Content -Path ./dev/$env:backend_config
            $tf_varsfile  = Get-Content -Path ./dev/$env:tf_varsfile
            location      = "$($tf_varsfile)[1].split('"')[1]"
            $sa_name      = "$($bkp_config)[0].split('"')[1]"
            $sa_rg        = "$($bkp_config)[3].split('"')[1]"
            try {
              $rg = Get-AzResourceGroup -Name $sa_name -ErrorAction SilentlyContinue
              if($null -ne $rg){
                Write-Host "Resource Group found!"
                Write-Host "Name: $($rg.Name)"
              }
              $sa = Get-AzStorageAccount -ResourceGroupName $sa_rg -Name $sa_name -ErrorAction SilentlyContinue
              if($null -ne $sa){
                Write-Host "Storage Account found!"
                Write-Host "Name: $($sa.StorageAccountName)"
                Write-Host "Location: $($sa.Location)"
                Write-Host "Kind: $($sa.ResourceGroupName)"
              }
            }
            Catch {
              Write-Host "Validate: Resource group could not be found. So, creating $sa_rg"
              try {
                    New-AzResourceGroup -Name $sa_rg -Location $location | Out-Null
                    Write-Host "Resource group $sa_rg created successfully."
                }
                catch {
                    Write-Host "Failed to create resource group."
                    Write-Host "Error: $($_.Exception.Message)"
                    exit 1
                }
              Write-Host "Validate: Storage account could not be found. So, creating $sa_name"
                try {
                    New-AzStorageAccount -ResourceGroupName $sa_rg -Name $sa_name -SkuName Standard_LRS -Location $location -Kind StorageV2 -AllowBlobPublicAccess $false -MinimumTlsVersion TLS1_2
                    Write-Host "Storage Account $sa_name created successfully."
                }
                catch {
                    Write-Host "Failed to create storage account."
                    Write-Host "Error: $($_.Exception.Message)"
                    exit 1
                }
            }
        env:
          backend_config: ${{ inputs.backend_config }}
          tf_varsfile: ${{ inputs.tf_varsfile }}


  terraform-deployment: 
    name: terraform-deploy-(${{ inputs.environment }})
    runs-on: ubuntu-latest
    needs: [precheck]
    permissions:
      contents: read
      id-token: write
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          repository: ${{ inputs.org }}/${{ inputs.repo }}
          token: ${{ secrets.TOKEN }}
          persist-credentials: false

      - name: Configure Git for private modules
        run: |
          git config --global url."https://${{ secrets.TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Initialize Terraform
        if: ${{ inputs.tf_init == true }}
        run: |
          terraform init -backend-config=${{ inputs.backend_config }}
        working-directory: ${{ github.workspace }}/${{ inputs.terraform_directory }}

      - name: Validate Terraform
        if: ${{ inputs.tf_init == true }}
        run: terraform validate
        working-directory: ${{ github.workspace }}/${{ inputs.terraform_directory }}

      - name: Plan Terraform
        if: ${{ inputs.tf_plan == true }}
        run: terraform plan -out=tfplan --var-file=${{ inputs.tf_varsfile }}
        working-directory: ${{ github.workspace }}/${{ inputs.terraform_directory }}

      - name: Apply Terraform
        if: ${{ inputs.tf_apply == true }}
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ github.workspace }}/${{ inputs.terraform_directory }}