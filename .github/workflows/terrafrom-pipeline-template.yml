name: terraform-pipeline-template

on:
  workflow_call:
    inputs:
      terraform_directory:
        required: true
        type: string
      environment:
        required: true
        type: string
      tf_version:
        required: true
        type: string
      tf_init:
        required: true
        default: true
        type: boolean
      tf_plan:
        required: true
        default: false
        type: boolean
      tf_apply:
        default: false
        type: boolean
      tf_varsfile:
        required: true
        type: string

    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      TOKEN:
        required: true

jobs:
  terraform:
    name: Terraform Deploy (${{ inputs.environment }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with: 
          repository: ab-all-hub/terraform-modules
          token: ${{ secrets.TOKEN }}
          persist-credentials: false

      - name: Configure Git for private modules
        run: |
          git config --global url."https://${{ secrets.TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Initialize Terraform
        if: ${{ inputs.tf_init == true }}
        run: terraform init
        working-directory: ${{ inputs.terraform_directory }}

      - name: Validate Terraform
        if: ${{ inputs.tf_init == true }}
        run: terraform validate
        working-directory: ${{ inputs.terraform_directory }}

      - name: Plan Terraform
        if: ${{ inputs.tf_plan == true }}
        run: terraform plan -out=tfplan --var-file=${{ inputs.tf_varsfile }}
        working-directory: ${{ inputs.terraform_directory }}

      - name: Apply Terraform
        if: ${{ inputs.tf_apply == true }}
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ inputs.terraform_directory }}