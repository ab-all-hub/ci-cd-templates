name: precheck-pipeline-template

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      tf_varsfile:
        required: true
        type: string
      backend_config:
        required: true
        type: string
      Org: 
        required: true
        type: string
      repo: 
        required: true
        type: string

    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      TOKEN:
        required: true

jobs:
  validation:
    name: ${{ inputs.environment }}-validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          repository: ${{ inputs.org }}/${{ inputs.repo }}
          token: ${{ secrets.TOKEN }}
          persist-credentials: false

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
          enable-AzPSSession: true

      - name: Validate management resource group
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          inlineScript: |
            $bkp_config     = Get-Content -Path ./dev/$env:backend_config | ConvertFrom-Json
            $tf_varsfile    = Get-Content -Path ./dev/$env:tf_varsfile | Convertfrom-Json
            $location       = $tf_varsfile.resource_group.location
            $sa_rg          = $bkp_config.storage_account_name
            try {
              $rg = Get-AzResourceGroup -Name $sa_rg
              if($null -ne $rg){
                Write-Host "validate: Resource Group found! : $sa_rg"
              }
            }
            Catch {
              Write-Host "Validate: Resource group could not be found. So, creating $sa_rg"
              try {
                    New-AzResourceGroup -Name $sa_rg -Location $location | Out-Null
                    Write-Host "Resource group $sa_rg created successfully."
                }
                catch {
                    Write-Host "Error: $($_.Exception.Message)"
                    exit 1
                }
            }
        env:
          backend_config: ${{ inputs.backend_config }}
          tf_varsfile: ${{ inputs.tf_varsfile }}
                
      - name: Validate storage account
        if: success()
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          inlineScript: |
            $bkp_config     = Get-Content -Path ./dev/$env:backend_config | ConvertFrom-Json
            $tf_varsfile    = Get-Content -Path ./dev/$env:tf_varsfile | ConvertFrom-Json
            $location       = $tf_varsfile.resource_group.location
            $sa_name        = $bkp_config.storage_account_name
            $sa_rg          = $bkp_config.resource_group_name
            $sa_cont_name   = $bkp_config.container_name
            try {
              $sa = Get-AzStorageAccount -ResourceGroupName $sa_rg -Name $sa_name
              if($null -ne $sa){
                Write-Host "Storage Account found! : Name: $($sa.StorageAccountName) Location: $($sa.Location) $($sa.ResourceGroupName)"
              }
            }
            Catch {
              Write-Host "Validate: Storage account could not be found. So, creating $sa_name"
                try {
                    $sa_param = @{
                        ResourceGroupName   = $sa_rg
                        Name                = $sa_name
                        SkuName             = "Standard_LRS"
                        Location            = $location
                        Kind                = "StorageV2"
                        MinimumTlsVersion   = "TLS1_2"
                    }
                    $storage_acc = New-AzStorageAccount @sa_param -AllowBlobPublicAccess $false 
                    Write-Host "Storage Account $sa_name created successfully."
                    New-AzStorageContainer -Name $sa_cont_name -Context $storage_acc.Context -PublicAccess Off
                    Write-Host "Blob Container $sa_cont_name created successfully."
                }
                catch {
                    Write-Host "Error: $($_.Exception.Message)"
                    exit 1
                }
            }
        env:
          backend_config: ${{ inputs.backend_config }}
          tf_varsfile: ${{ inputs.tf_varsfile }}